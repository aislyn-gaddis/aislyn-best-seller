[
  {
    "objectID": "01-cleaning.html",
    "href": "01-cleaning.html",
    "title": "Cleaning",
    "section": "",
    "text": "In this notebook, I’m going to\n\nimport the Post45 Data Collective’s NYT bestseller data set\nweb scrape the NYT Hardcover Fiction List\nweb scrape the NYT Combined Print and E-Book Fiction List\nclean the data\njoin the two hardcover fiction data sets\nsave the data\n\nI’ll load any libraries I might need.\n\nlibrary(readr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.2\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(lubridate)\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding"
  },
  {
    "objectID": "01-cleaning.html#goals-of-the-notebook",
    "href": "01-cleaning.html#goals-of-the-notebook",
    "title": "Cleaning",
    "section": "",
    "text": "In this notebook, I’m going to\n\nimport the Post45 Data Collective’s NYT bestseller data set\nweb scrape the NYT Hardcover Fiction List\nweb scrape the NYT Combined Print and E-Book Fiction List\nclean the data\njoin the two hardcover fiction data sets\nsave the data\n\nI’ll load any libraries I might need.\n\nlibrary(readr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.2\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(lubridate)\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding"
  },
  {
    "objectID": "01-cleaning.html#main-data-import",
    "href": "01-cleaning.html#main-data-import",
    "title": "Cleaning",
    "section": "Main Data Import",
    "text": "Main Data Import\nI’ll import the years I already have. I downloaded this from the Post45 Data Collective which is run by Emory University. It’s every week of the New York Times Bestsellers list going back to when it started in 1931 up to December 2020.\n\nbestsellers &lt;- read_tsv(\"data-raw/nyt_full.tsv\") |&gt; \n  glimpse()\n\nRows: 60386 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (2): title, author\ndbl  (3): year, rank, title_id\ndate (1): week\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nRows: 60,386\nColumns: 6\n$ year     &lt;dbl&gt; 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1…\n$ week     &lt;date&gt; 1931-10-12, 1931-10-12, 1931-10-12, 1931-10-12, 1931-10-12, …\n$ rank     &lt;dbl&gt; 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2…\n$ title_id &lt;dbl&gt; 6477, 1808, 5304, 4038, 3946, 2878, 7031, 413, 859, 4235, 287…\n$ title    &lt;chr&gt; \"THE TEN COMMANDMENTS\", \"FINCHE'S FORTUNE\", \"THE GOOD EARTH\",…\n$ author   &lt;chr&gt; \"Warwick Deeping\", \"Mazo de la Roche\", \"Pearl S. Buck\", \"Will…"
  },
  {
    "objectID": "01-cleaning.html#hardcover-fiction-web-scrape",
    "href": "01-cleaning.html#hardcover-fiction-web-scrape",
    "title": "Cleaning",
    "section": "Hardcover Fiction Web Scrape",
    "text": "Hardcover Fiction Web Scrape\nNow, I’m going to get the missing years of the hardcover fiction data by web scraping directly from the NYT’s website. You might might need to run the code multiple times before it will successfully complete. I also recommend you comment the code after completion since it takes a bit to run.\n\nstart_date &lt;- as.Date(\"2020-12-13\")\nend_date &lt;- as.Date(\"2024-10-06\")\n\ndates &lt;- seq(start_date, end_date, by = \"week\")\n\ndfs &lt;- map_dfr(dates, function(date) {\n  url &lt;- sprintf(\"https://www.nytimes.com/books/best-sellers/%s/hardcover-fiction/\", format(date, \"%Y/%m/%d\"))\n  \n  page &lt;- read_html(url)\n  \n  titles &lt;- page %&gt;%\n    html_nodes(\".css-5pe77f\") %&gt;%\n    html_text()\n  \n  authors &lt;- page %&gt;%\n    html_nodes(\".css-hjukut\") %&gt;%\n    html_text()\n  \n  ranks &lt;- seq_along(titles)\n  \n  data.frame(title = titles, author = authors, rank = ranks, date = date)\n})\n\ndfs |&gt; write_rds(\"data-raw/bestsellers-web-scrape.rds\")\n\nI’ll save the new file into a new object and glimpse it. I also saved the data into a csv just for the purpose of importing it to google sheets later.\n\nbestsellers_two &lt;- read_rds(\"data-raw/bestsellers-web-scrape.rds\") # creating a new object with a file \n\nbestsellers_two |&gt; write_csv(\"data-raw/bestsellers-web-scrape.csv\") # saving the object into a csv to be able to upload it to google sheets\n\nbestsellers_two |&gt; glimpse() # glimpsing the data\n\nRows: 3,000\nColumns: 4\n$ title  &lt;chr&gt; \"READY PLAYER TWO\", \"DEADLY CROSS\", \"THE RETURN\", \"A TIME FOR M…\n$ author &lt;chr&gt; \"by Ernest Cline\", \"by James Patterson\", \"by Nicholas Sparks\", …\n$ rank   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, …\n$ date   &lt;date&gt; 2020-12-13, 2020-12-13, 2020-12-13, 2020-12-13, 2020-12-13, 20…"
  },
  {
    "objectID": "01-cleaning.html#combined-print-and-e-book-web-scrape",
    "href": "01-cleaning.html#combined-print-and-e-book-web-scrape",
    "title": "Cleaning",
    "section": "Combined Print and E-book Web Scrape",
    "text": "Combined Print and E-book Web Scrape\nNow I’ll do a similar web scrape to get the combined print and ebook list. This is going through over a decade of data, so you may have to try running it a few times before it successfully completes. I also recommend commenting it after you finish running it.\n\nstart_date &lt;- as.Date(\"2011-02-13\")\nend_date &lt;- as.Date(\"2024-10-06\")\n\ndates &lt;- seq(start_date, end_date, by = \"week\")\n\ndfs &lt;- map_dfr(dates, function(date) {\n  url &lt;- sprintf(\"https://www.nytimes.com/books/best-sellers/%s/combined-print-and-e-book-fiction/\", format(date, \"%Y/%m/%d\"))\n  \n  page &lt;- tryCatch(read_html(url), error = function(e) NULL)\n  \n  if (!is.null(page)) {\n    titles &lt;- page %&gt;%\n    html_nodes(\".css-5pe77f\") %&gt;%\n    html_text()\n\n    authors &lt;- page %&gt;%\n    html_nodes(\".css-hjukut\") %&gt;%\n    html_text()\n    \n    ranks &lt;- seq_along(titles)\n    \n    data.frame(title = titles, author = authors, rank = ranks, date = date)\n  } else {\n    NULL\n  }\n})\n\ndfs |&gt; write_rds(\"data-raw/bestsellers-combined-web-scrape.rds\")\n\nbestsellers_combined &lt;- read_rds(\"data-raw/bestsellers-combined-web-scrape.rds\") \n\nbestsellers_combined |&gt; glimpse()\n\nRows: 10,695\nColumns: 4\n$ title  &lt;chr&gt; \"TICK TOCK\", \"THE GIRL WITH THE DRAGON TATTOO\", \"THE GIRL WHO P…\n$ author &lt;chr&gt; \"by James Patterson and Michael Ledwidge\", \"by Stieg Larsson\", …\n$ rank   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, …\n$ date   &lt;date&gt; 2011-02-13, 2011-02-13, 2011-02-13, 2011-02-13, 2011-02-13, 20…"
  },
  {
    "objectID": "01-cleaning.html#cleaning",
    "href": "01-cleaning.html#cleaning",
    "title": "Cleaning",
    "section": "Cleaning",
    "text": "Cleaning\nFirst, I’ll clean the main data file from the Post45 data collective. The only thing I need to do is remove the title_id column since I won’t be using it.\n\nbestsellers_clean &lt;- bestsellers |&gt; # saving this chunk into a new object and starting with the data\n  select(-title_id) |&gt; # removing the title_id column\n  glimpse() # glimpsing the data\n\nRows: 60,386\nColumns: 5\n$ year   &lt;dbl&gt; 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 193…\n$ week   &lt;date&gt; 1931-10-12, 1931-10-12, 1931-10-12, 1931-10-12, 1931-10-12, 19…\n$ rank   &lt;dbl&gt; 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, …\n$ title  &lt;chr&gt; \"THE TEN COMMANDMENTS\", \"FINCHE'S FORTUNE\", \"THE GOOD EARTH\", \"…\n$ author &lt;chr&gt; \"Warwick Deeping\", \"Mazo de la Roche\", \"Pearl S. Buck\", \"Willa …\n\n\nNow, I’ll clean the web scrape to make it match the first dataset.\n\nbestsellers_two_clean &lt;- bestsellers_two |&gt; # saving this chunk into a new object and starting with the data\n  mutate(year = year(date), # making a year column\n         week = date, # making a new date column called \"week\" to match the first dataset\n         author = str_remove_all(author, \"by \"), # removing the \"by \" from the author column\n         rank = as.numeric(rank)) |&gt; # changing the rank column from int to dbl\n  select(year,\n         week,\n         rank,\n         title,\n         author) |&gt; # putting the columns in the same order as the first dataset\n  glimpse() # glimpsing the data\n\nRows: 3,000\nColumns: 5\n$ year   &lt;dbl&gt; 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 202…\n$ week   &lt;date&gt; 2020-12-13, 2020-12-13, 2020-12-13, 2020-12-13, 2020-12-13, 20…\n$ rank   &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, …\n$ title  &lt;chr&gt; \"READY PLAYER TWO\", \"DEADLY CROSS\", \"THE RETURN\", \"A TIME FOR M…\n$ author &lt;chr&gt; \"Ernest Cline\", \"James Patterson\", \"Nicholas Sparks\", \"John Gri…\n\n\nI’ll do the same for the combined list.\n\nbestsellers_combined_clean &lt;- bestsellers_combined |&gt; # saving this chunk into a new object and starting with the data\n  mutate(year = year(date), # making a year column\n         week = date, # making a new date column called \"week\" to match the first dataset\n         author = str_remove_all(author, \"by \"), # removing the \"by \" from the author column\n         rank = as.numeric(rank)) |&gt; # changing the rank column from int to dbl\n  select(year,\n         week,\n         rank,\n         title,\n         author) |&gt; # putting the columns in the same order as the first dataset\n  glimpse() # glimpsing the data\n\nRows: 10,695\nColumns: 5\n$ year   &lt;dbl&gt; 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 201…\n$ week   &lt;date&gt; 2011-02-13, 2011-02-13, 2011-02-13, 2011-02-13, 2011-02-13, 20…\n$ rank   &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, …\n$ title  &lt;chr&gt; \"TICK TOCK\", \"THE GIRL WITH THE DRAGON TATTOO\", \"THE GIRL WHO P…\n$ author &lt;chr&gt; \"James Patterson and Michael Ledwidge\", \"Stieg Larsson\", \"Stieg…"
  },
  {
    "objectID": "01-cleaning.html#combining-the-data",
    "href": "01-cleaning.html#combining-the-data",
    "title": "Cleaning",
    "section": "Combining the data",
    "text": "Combining the data\nNow that both of the hardcover fiction datasets have the same columns, I’ll combine them.\n\nbestsellers_full &lt;- bestsellers_clean |&gt; # saving this chunk into a new object and starting with the data\n  bind_rows(bestsellers_two_clean) |&gt; # binding the two datasets together\n  glimpse()\n\nRows: 63,386\nColumns: 5\n$ year   &lt;dbl&gt; 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 193…\n$ week   &lt;date&gt; 1931-10-12, 1931-10-12, 1931-10-12, 1931-10-12, 1931-10-12, 19…\n$ rank   &lt;dbl&gt; 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, …\n$ title  &lt;chr&gt; \"THE TEN COMMANDMENTS\", \"FINCHE'S FORTUNE\", \"THE GOOD EARTH\", \"…\n$ author &lt;chr&gt; \"Warwick Deeping\", \"Mazo de la Roche\", \"Pearl S. Buck\", \"Willa …"
  },
  {
    "objectID": "01-cleaning.html#fixing-non-split-columns",
    "href": "01-cleaning.html#fixing-non-split-columns",
    "title": "Cleaning",
    "section": "Fixing non-split columns",
    "text": "Fixing non-split columns\nThere are some columns where the title and author aren’t split properly.\nI’ll start by getting rid of those columns from the main data set, then creating a new object with just those columns to fix them.\nThen, I separate the title and author into new columns using the , in between them. I’ll also remove the by and the publisher information\n\nbestsellers_no_na &lt;- bestsellers_full |&gt; # saving the data into a new object\n  filter(!is.na(author)) # removing columns where author is na\n\nbestsellers_na &lt;- bestsellers_full |&gt; # saving the data into a new object\n  filter(is.na(author)) # only including columns where author is na\n\nbestsellers_na_clean &lt;- bestsellers_na |&gt; # saving the data into a new object\n  separate(title, sep = \",\", into = c(\"title\", \"author\")) |&gt; # separate the title column into two columns named title and author based on the comma\n  mutate(author = str_remove_all(author, \"by \")) |&gt; # removing the by\n  mutate(author = str_remove_all(author, \"\\\\(.*\")) |&gt; # removing the publisher information using the ()\n  mutate(author = str_sub(author, end = -3))# removing the period and spaces by removing the last 3 characters of the column\n\nWarning: Expected 2 pieces. Additional pieces discarded in 7 rows [1, 2, 3, 4,\n5, 6, 7].\n\nbestsellers_na_clean"
  },
  {
    "objectID": "01-cleaning.html#joining-the-data-again",
    "href": "01-cleaning.html#joining-the-data-again",
    "title": "Cleaning",
    "section": "Joining the data again",
    "text": "Joining the data again\nNow that I’ve fixed the rows that didn’t separate properly, I’ll join everything back together.\n\nbestsellers_full_clean &lt;- bestsellers_no_na |&gt; \n  bind_rows(bestsellers_na_clean) |&gt; \n  glimpse()\n\nRows: 63,386\nColumns: 5\n$ year   &lt;dbl&gt; 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 193…\n$ week   &lt;date&gt; 1931-10-12, 1931-10-12, 1931-10-12, 1931-10-12, 1931-10-12, 19…\n$ rank   &lt;dbl&gt; 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, …\n$ title  &lt;chr&gt; \"THE TEN COMMANDMENTS\", \"FINCHE'S FORTUNE\", \"THE GOOD EARTH\", \"…\n$ author &lt;chr&gt; \"Warwick Deeping\", \"Mazo de la Roche\", \"Pearl S. Buck\", \"Willa …\n\n\nIt looks like everything parsed correctly in the combined list data, so I don’t need to worry about that."
  },
  {
    "objectID": "01-cleaning.html#exporting-the-data",
    "href": "01-cleaning.html#exporting-the-data",
    "title": "Cleaning",
    "section": "Exporting the data",
    "text": "Exporting the data\nI’ll export the data to my computer as an rds and as a csv\n\nbestsellers_full_clean |&gt; write_rds(\"data-processed/bestsellers-full.rds\")\nbestsellers_full_clean |&gt; write_csv(\"data-processed/bestsellers-full.csv\")\n\nbestsellers_combined_clean |&gt; write_rds(\"data-processed/bestsellers-combined.rds\")\nbestsellers_combined_clean |&gt; write_csv(\"data-processed/bestsellers-combined.csv\")"
  },
  {
    "objectID": "02-analysis.html",
    "href": "02-analysis.html",
    "title": "Hardcover Fiction Analysis",
    "section": "",
    "text": "Here’s what I’ll find in this notebook\n\nI’ll make a searchable table\nWhat authors have had the most appearances on the list?\nWhat author has had the most appearances this year? last 2 years? 5 years? 10 years?\nWhat authors have had the most No. 1 appearances?\nWhat author has had the most No. 1 appearances this year? last 2 years? 5 years? 10 years?\nWhat authors have had the most books on the list?\nWhat author has had the most books on the the list this year? last 2 years? 5 years? 10 years?\nWhat books have been on the list for the most number of weeks?\nWhat books were No. 1 for the most number of weeks?\nHow did movie adaptations affect the charts?\nWhat authors have had the most No. 1 books?\nWhat author has had the most No. 1 books in the last 5 years? 10 years?"
  },
  {
    "objectID": "02-analysis.html#goals-of-the-notebook",
    "href": "02-analysis.html#goals-of-the-notebook",
    "title": "Hardcover Fiction Analysis",
    "section": "",
    "text": "Here’s what I’ll find in this notebook\n\nI’ll make a searchable table\nWhat authors have had the most appearances on the list?\nWhat author has had the most appearances this year? last 2 years? 5 years? 10 years?\nWhat authors have had the most No. 1 appearances?\nWhat author has had the most No. 1 appearances this year? last 2 years? 5 years? 10 years?\nWhat authors have had the most books on the list?\nWhat author has had the most books on the the list this year? last 2 years? 5 years? 10 years?\nWhat books have been on the list for the most number of weeks?\nWhat books were No. 1 for the most number of weeks?\nHow did movie adaptations affect the charts?\nWhat authors have had the most No. 1 books?\nWhat author has had the most No. 1 books in the last 5 years? 10 years?"
  },
  {
    "objectID": "02-analysis.html#setup",
    "href": "02-analysis.html#setup",
    "title": "Hardcover Fiction Analysis",
    "section": "Setup",
    "text": "Setup\nI’ll load the necessary libraries.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lubridate)\nlibrary(DT)"
  },
  {
    "objectID": "02-analysis.html#import",
    "href": "02-analysis.html#import",
    "title": "Hardcover Fiction Analysis",
    "section": "Import",
    "text": "Import\nI’ll import the data into the notebook by saving the file into a new object\n\nbestsellers &lt;- read_rds(\"data-processed/bestsellers-full.rds\") # saving the data into a new object\n\nglimpse(bestsellers) # glimpsing the data\n\nRows: 63,386\nColumns: 5\n$ year   &lt;dbl&gt; 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 193…\n$ week   &lt;date&gt; 1931-10-12, 1931-10-12, 1931-10-12, 1931-10-12, 1931-10-12, 19…\n$ rank   &lt;dbl&gt; 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, …\n$ title  &lt;chr&gt; \"THE TEN COMMANDMENTS\", \"FINCHE'S FORTUNE\", \"THE GOOD EARTH\", \"…\n$ author &lt;chr&gt; \"Warwick Deeping\", \"Mazo de la Roche\", \"Pearl S. Buck\", \"Willa …"
  },
  {
    "objectID": "02-analysis.html#making-a-searchable-table",
    "href": "02-analysis.html#making-a-searchable-table",
    "title": "Hardcover Fiction Analysis",
    "section": "Making a searchable table",
    "text": "Making a searchable table\nI’ll make a searchable table to look for certain authors and books.\n\nbestsellers |&gt; \n  datatable()\n\nWarning in instance$preRenderHook(instance): It seems your data is too big for\nclient-side DataTables. You may consider server-side processing:\nhttps://rstudio.github.io/DT/server.html"
  },
  {
    "objectID": "02-analysis.html#what-authors-have-had-the-most-appearances-on-the-list",
    "href": "02-analysis.html#what-authors-have-had-the-most-appearances-on-the-list",
    "title": "Hardcover Fiction Analysis",
    "section": "What authors have had the most appearances on the list?",
    "text": "What authors have had the most appearances on the list?\nI’ll use gsa to find what authors have had the most appearances on the list.\nRomance author Danielle Steel has had the most appearances on the list with 1022. Horror author Stephen King comes in second with 972. Legal thriller author John Grisham comes in third with 893, still hundreds above 4th place\nI’m using this data for a story chart. Here is a link to that chart.\n\nbestsellers_appearances &lt;- bestsellers |&gt; # saving the data into a new object\n  group_by(author) |&gt; # group by author\n  summarize(total_appearances = n()) |&gt; # count appearances\n  arrange(desc(total_appearances)) # arrange in descending order by total_appearances\n\nbestsellers_appearances |&gt; # start with the data\n   filter(total_appearances &gt; 400) |&gt; # only include rows with total_appearances over 400\n  write_csv(\"data-processed/most-appearances.csv\") |&gt; # save the data for data wrapper\n  print() # print it\n\n# A tibble: 10 × 2\n   author             total_appearances\n   &lt;chr&gt;                          &lt;int&gt;\n 1 Danielle Steel                  1022\n 2 Stephen King                     972\n 3 John Grisham                     893\n 4 Taylor Caldwell                  524\n 5 James A. Michener                478\n 6 David Baldacci                   465\n 7 Nicholas Sparks                  437\n 8 Robert Ludlum                    406\n 9 Leon Uris                        405\n10 Mary Higgins Clark               403"
  },
  {
    "objectID": "02-analysis.html#what-author-has-had-the-most-appearances-this-year-last-2-years-5-years-10-years",
    "href": "02-analysis.html#what-author-has-had-the-most-appearances-this-year-last-2-years-5-years-10-years",
    "title": "Hardcover Fiction Analysis",
    "section": "What author has had the most appearances this year? last 2 years? 5 years? 10 years?",
    "text": "What author has had the most appearances this year? last 2 years? 5 years? 10 years?\nFirst, I’ll find which authors have had the most appearances this year.\nRebecca Yarros has had 118, Bonnie Garmus has had 68 and Barbara Kingsolver has had 62.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2022) |&gt; # only include rows with a year over 2022\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 33) # only include appearances above 33\n\n\n  \n\n\n\nI’ll look at the past two years.\nIt’s Rebecca Yarros with 118.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2021) |&gt; # only include rows with a year over 2021\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 40) # only include appearances above 40\n\n\n  \n\n\n\nI’ll look at the past five years.\nIt’s John Grisham with 159.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2018) |&gt; # only include rows with a year over 2018\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 68) # only include appearances above 68\n\n\n  \n\n\n\nI’ll look at 10 years.\nIt’s John Grisham again with 276.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2013) |&gt; # only include rows with a year over 2013\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 111) # only include appearances above 111"
  },
  {
    "objectID": "02-analysis.html#what-authors-have-had-the-most-no.-1-appearances",
    "href": "02-analysis.html#what-authors-have-had-the-most-no.-1-appearances",
    "title": "Hardcover Fiction Analysis",
    "section": "What authors have had the most No. 1 appearances?",
    "text": "What authors have had the most No. 1 appearances?\nJohn Grisham comes in first with 188. Stephen King takes second with 152. James A. Michener takes third with 132.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1) |&gt; # only include rows with a rank of 1\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 61) # only include appearances above 61"
  },
  {
    "objectID": "02-analysis.html#what-author-has-had-the-most-no.-1-appearances-this-year-last-2-years-5-years-10-years",
    "href": "02-analysis.html#what-author-has-had-the-most-no.-1-appearances-this-year-last-2-years-5-years-10-years",
    "title": "Hardcover Fiction Analysis",
    "section": "What author has had the most No. 1 appearances this year? last 2 years? 5 years? 10 years?",
    "text": "What author has had the most No. 1 appearances this year? last 2 years? 5 years? 10 years?\nI’ll look at this year first.\nIt’s Rebecca Yarros with 24.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2022,\n         rank == 1) |&gt; # only include rows with a year over 2022 and a rank of 1\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 1) # only include appearances above 1\n\n\n  \n\n\n\nNow two years.\nIt’s Rebecca Yarros with 24.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2021,\n         rank == 1) |&gt; # only include rows with a year over 2021 and a rank of 1\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 4) # only include appearances above 4\n\n\n  \n\n\n\n5 years?\nIt’s Delia Owens with 54.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2018,\n         rank == 1) |&gt; # only include rows with a year over 2018 and a rank of 1\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 4) # only include appearances above 4\n\n\n  \n\n\n\nAnd finally, 10 years?\nIt’s John Grisham with 59, but Delia Owens comes close with 54.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2013,\n         rank == 1) |&gt; # only include rows with a year over 2013 and a rank of 1\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 9) # only include appearances above 9"
  },
  {
    "objectID": "02-analysis.html#what-authors-have-had-the-most-books-on-the-list",
    "href": "02-analysis.html#what-authors-have-had-the-most-books-on-the-list",
    "title": "Hardcover Fiction Analysis",
    "section": "What authors have had the most books on the list?",
    "text": "What authors have had the most books on the list?\nDanielle Steel has had the most books on the list with 142. Stuart Woods comes in a far away second with 68. Stephen King comes in third with 58.\n\nbestsellers |&gt; # start with the data\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 40) # only include titles above 40"
  },
  {
    "objectID": "02-analysis.html#what-author-has-had-the-most-books-on-the-list-in-the-last-year-2-years-5-years-10-years",
    "href": "02-analysis.html#what-author-has-had-the-most-books-on-the-list-in-the-last-year-2-years-5-years-10-years",
    "title": "Hardcover Fiction Analysis",
    "section": "What author has had the most books on the list in the last year? 2 years? 5 years? 10 years?",
    "text": "What author has had the most books on the list in the last year? 2 years? 5 years? 10 years?\nI’ll start with this year.\nIt’s Danielle Steel with 12.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt;2022) |&gt; # only include rows with year over 2022\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 2) # only include titles above 2\n\n\n  \n\n\n\nI’ll look at two years.\nIt’s Danielle Steel with 19.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt;2021) |&gt; # only include rows with a year over 2021\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 3) # only include titles above 3\n\n\n  \n\n\n\nI’ll look at the last 5 years.\nIt’s Danielle Steel again with 39.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2018) |&gt; # only include rows with a year over 2018\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 8) # only include titles above 8\n\n\n  \n\n\n\nNow, I’ll look at the last 10 years.\nIt’s also Danielle Steel with 65.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2013) |&gt; # only include rows with a year over 2013\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 15) # only include titles above 15"
  },
  {
    "objectID": "02-analysis.html#what-books-have-been-on-the-list-for-the-most-number-of-weeks",
    "href": "02-analysis.html#what-books-have-been-on-the-list-for-the-most-number-of-weeks",
    "title": "Hardcover Fiction Analysis",
    "section": "What books have been on the list for the most number of weeks?",
    "text": "What books have been on the list for the most number of weeks?\nI’ll use gsa again to find which books have been on the list for the most number of weeks.\nOh, The Places You’ll Go! by Dr. Suess takes first with 178 weeks on the list. The Da Vinci Code by Dan Brown and The Celestine Prophecy by James Redfield are tied for second with 165 weeks. The Bridges of Madison County by Robert James Waller is in fourth with 164 weeks.\nI’m using this data for a story chart. Here is a link to that chart.\n\nbestsellers |&gt; # start with the data\n  group_by(author, title) |&gt; # group by author and title\n  summarize(appearances = n()) |&gt; # count number of appearances\n  arrange(desc(appearances)) |&gt; # arrange in descending order\n  filter(appearances &gt; 106) |&gt; # only include rows with appearances greater than 106\n  write_csv(\"data-processed/most-weeks.csv\") |&gt; # save the data for data wrapper\n  print() # print it\n\n`summarise()` has grouped output by 'author'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 10 × 3\n# Groups:   author [10]\n   author              title                         appearances\n   &lt;chr&gt;               &lt;chr&gt;                               &lt;int&gt;\n 1 Dr. Seuss           OH, THE PLACES YOU'LL GO!             178\n 2 Dan Brown           THE DA VINCI CODE                     165\n 3 James Redfield      THE CELESTINE PROPHECY                165\n 4 Robert James Waller THE BRIDGES OF MADISON COUNTY         164\n 5 Anthony Doerr       ALL THE LIGHT WE CANNOT SEE           132\n 6 Delia Owens         WHERE THE CRAWDADS SING               132\n 7 Herman Wouk         THE CAINE MUTINY                      123\n 8 Patrick Dennis      AUNTIE MAME                           112\n 9 Lloyd C. Douglas    THE ROBE                              111\n10 Kathryn Stockett    THE HELP                              108"
  },
  {
    "objectID": "02-analysis.html#what-books-were-no.-1-for-the-most-number-of-weeks",
    "href": "02-analysis.html#what-books-were-no.-1-for-the-most-number-of-weeks",
    "title": "Hardcover Fiction Analysis",
    "section": "What books were No. 1 for the most number of weeks?",
    "text": "What books were No. 1 for the most number of weeks?\nI’ll find which books were No. 1 for the most number of weeks by filtering first, and then using gsa.\nThe Da Vinci Code has the most number of weeks at No. 1 with 59. Where the Crawdads Sing by Delia Owens is in second with 54 weeks at No. 1.\nIt’s interesting that both these books had their fair share of controversy AND a movie adaptation.\nI’m using this data for a story chart. Here is a link to that chart.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1) |&gt; # only include rows where the rank is 1\n  group_by(author, title) |&gt; # group by author and title\n  summarize(appearances = n()) |&gt; # count number of appearances\n  arrange(desc(appearances)) |&gt; # arrange in descending order\n  filter(appearances &gt; 33) |&gt; # only include rows with appearances greater than 33\n  write_csv(\"data-processed/most-one-weeks.csv\") |&gt; # save the data for data wrapepr\n  print() # print it\n\n`summarise()` has grouped output by 'author'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 10 × 3\n# Groups:   author [10]\n   author              title                             appearances\n   &lt;chr&gt;               &lt;chr&gt;                                   &lt;int&gt;\n 1 Dan Brown           THE DA VINCI CODE                          59\n 2 Delia Owens         WHERE THE CRAWDADS SING                    54\n 3 James A. Michener   HAWAII                                     49\n 4 Herman Wouk         THE CAINE MUTINY                           48\n 5 Erich Segal         LOVE STORY                                 41\n 6 James Michener      THE SOURCE                                 41\n 7 Richard Bach        JONATHAN LIVINGSTON SEAGULL                38\n 8 Robert James Waller THE BRIDGES OF MADISON COUNTY              38\n 9 Leon Uris           TRINITY                                    36\n10 John le Carré       THE SPY WHO CAME IN FROM THE COLD          34"
  },
  {
    "objectID": "02-analysis.html#how-did-movie-adaptations-affect-the-charts",
    "href": "02-analysis.html#how-did-movie-adaptations-affect-the-charts",
    "title": "Hardcover Fiction Analysis",
    "section": "How did movie adaptations affect the charts?",
    "text": "How did movie adaptations affect the charts?\nLet’s see if the books returned to the charts after the move adaptations came out.\nFirst, I’ll look at The Da Vinci Code. Once I filtered to just look The Da Vinci Code, I noticed that it actually appeared to stay on the charts pretty consistently. I grouped and summarized by year to check what I was seeing. Rather than having a resurgance after the movie came out (in 2006), The Da Vinci code appears to have actually just stayed on the list pretty much the whole time.\n\nbestsellers |&gt; # start with the data\n  filter(str_detect(title, \"THE DA VINCI CODE\")) |&gt; # only inlcude The Da Vinci Code\n  group_by(year) |&gt; # group by year\n  summarize(appearance = n()) # count the number of appearances in each year\n\n\n  \n\n\n\nNow, I’ll look at Where the Crawdads Sing. The book was published in 2018 and the movie was released in July 2022 (the same week it got on the list in 2022). It looks like the book gained traction in the years following it’s release, possibly from the adaptation being announced, but it had slowed down by the time the movie was released.\n\nbestsellers |&gt; # start with the data\n  filter(str_detect(title, \"WHERE THE CRAWDADS SING\")) # only include Where the Crawdads Sing\n\n\n  \n\n\nbestsellers |&gt; # start with the data\n  filter(str_detect(title, \"WHERE THE CRAWDADS SING\")) |&gt; # only include Where the Crawdads Sing\n  group_by(year) |&gt; # group by year\n  summarize(appearances = n()) # count number of appearances per year"
  },
  {
    "objectID": "02-analysis.html#what-authors-have-had-the-most-titles-reach-no.-1",
    "href": "02-analysis.html#what-authors-have-had-the-most-titles-reach-no.-1",
    "title": "Hardcover Fiction Analysis",
    "section": "What authors have had the most titles reach No. 1?",
    "text": "What authors have had the most titles reach No. 1?\nI’ll find which authors have had the most No. 1 titles.\nStephen King is in first with 44 No. 1 titles. John Grisham is in second with 40 titles. Danielle Steel is in third with 36 titles.\nThese authors were also top three for most appearances on the chart, just in a different order.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1) |&gt; # only include rows with a rank of 1\n  distinct(author, title) |&gt; # only include distinct author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count number of titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 16) # only include rows with titles greater than 16"
  },
  {
    "objectID": "02-analysis.html#what-author-has-had-the-most-no.-1-books-in-the-last-2-years-5-years-10-years",
    "href": "02-analysis.html#what-author-has-had-the-most-no.-1-books-in-the-last-2-years-5-years-10-years",
    "title": "Hardcover Fiction Analysis",
    "section": "What author has had the most No. 1 books in the last 2 years? 5 years? 10 years?",
    "text": "What author has had the most No. 1 books in the last 2 years? 5 years? 10 years?\nI’ll start with 2 years.\nJohn Grisham has the most with 5 No. 1 books.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1, \n         year &gt;2021) |&gt; # only include rows with a rank of 1 and a year over 2021\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 1) # only include titles above 1\n\n\n  \n\n\n\nI’ll find which authors have had the most No. 1 books in the last 5 years.\nJohn Grisham is in first with 10 No.1 titles in the last 5 years. David Baldacci is in second with 8.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1, \n         year &gt; 2018) |&gt; # only include rows with a rank of 1 and a year over 2018\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 2) # only include titles above 2\n\n\n  \n\n\n\nNow, I’ll look at the last 10 years.\nThe results are fairly similar to the last five years. John Grisham is in first with 16 No. 1 titles in the last 10 years. David Baldacci is in second with 14. Stephen King is in third with 13.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1,\n         year &gt; 2013) |&gt; # only include rows with a rank of 1 and a year over 2013\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 7) # only include titles above 7"
  },
  {
    "objectID": "03-analysis.html",
    "href": "03-analysis.html",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "",
    "text": "Here’s what I’ll find in this notebook\n\nI’ll make a searchable table\nWhat authors have had the most appearances on the list?\nWhat author has had the most appearances this year? last 2 years? 5 years? 10 years?\nWhat authors have had the most No. 1 appearances?\nWhat author has had the most No. 1 appearances this year? last 2 years? 5 years? 10 years?\nWhat authors have had the most books on the list?\nWhat author has had the most books on the the list this year? last 2 years? 5 years? 10 years?\nWhat books have been on the list for the most number of weeks?\nWhat books were No. 1 for the most number of weeks?\nHow did movie adaptations affect the charts?\nWhat authors have had the most No. 1 books?\nWhat author has had the most No. 1 books in the last 5 years? 10 years?"
  },
  {
    "objectID": "03-analysis.html#goals-of-the-notebook",
    "href": "03-analysis.html#goals-of-the-notebook",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "",
    "text": "Here’s what I’ll find in this notebook\n\nI’ll make a searchable table\nWhat authors have had the most appearances on the list?\nWhat author has had the most appearances this year? last 2 years? 5 years? 10 years?\nWhat authors have had the most No. 1 appearances?\nWhat author has had the most No. 1 appearances this year? last 2 years? 5 years? 10 years?\nWhat authors have had the most books on the list?\nWhat author has had the most books on the the list this year? last 2 years? 5 years? 10 years?\nWhat books have been on the list for the most number of weeks?\nWhat books were No. 1 for the most number of weeks?\nHow did movie adaptations affect the charts?\nWhat authors have had the most No. 1 books?\nWhat author has had the most No. 1 books in the last 5 years? 10 years?"
  },
  {
    "objectID": "03-analysis.html#setup",
    "href": "03-analysis.html#setup",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "Setup",
    "text": "Setup\nI’ll load the necessary libraries.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lubridate)\nlibrary(DT)"
  },
  {
    "objectID": "03-analysis.html#import",
    "href": "03-analysis.html#import",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "Import",
    "text": "Import\nI’ll import the data into the notebook by saving the file into a new object\n\nbestsellers &lt;- read_rds(\"data-processed/bestsellers-combined.rds\") # saving the data into a new object\n\nglimpse(bestsellers) # glimpsing the data\n\nRows: 10,680\nColumns: 5\n$ year   &lt;dbl&gt; 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 201…\n$ week   &lt;date&gt; 2011-02-13, 2011-02-13, 2011-02-13, 2011-02-13, 2011-02-13, 20…\n$ rank   &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, …\n$ title  &lt;chr&gt; \"TICK TOCK\", \"THE GIRL WITH THE DRAGON TATTOO\", \"THE GIRL WHO P…\n$ author &lt;chr&gt; \"James Patterson and Michael Ledwidge\", \"Stieg Larsson\", \"Stieg…"
  },
  {
    "objectID": "03-analysis.html#making-a-searchable-table",
    "href": "03-analysis.html#making-a-searchable-table",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "Making a searchable table",
    "text": "Making a searchable table\nI’ll make a searchable table to look for certain authors and books.\n\nbestsellers |&gt; \n  datatable()"
  },
  {
    "objectID": "03-analysis.html#what-authors-have-had-the-most-appearances-on-the-list",
    "href": "03-analysis.html#what-authors-have-had-the-most-appearances-on-the-list",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "What authors have had the most appearances on the list?",
    "text": "What authors have had the most appearances on the list?\nI’ll use gsa to find what authors have had the most appearances on the list.\nColleen Hoover blows everyone else out of the water with 448 total appearances. John Grisham comes in second with 355, and David Baldacci comes in third with 248.\n\nbestsellers_appearances &lt;- bestsellers |&gt; # saving the data into a new object\n  group_by(author) |&gt; # group by author\n  summarize(total_appearances = n()) |&gt; # count appearances\n  arrange(desc(total_appearances)) # arrange in descending order by total_appearances\n\nbestsellers_appearances |&gt; # start with the data\n   filter(total_appearances &gt; 152) |&gt; # only include rows with total_appearances over 152\n  write_csv(\"data-processed/most-appearances.csv\") |&gt; # save the data for data wrapper\n  print() # print it\n\n# A tibble: 10 × 2\n   author              total_appearances\n   &lt;chr&gt;                           &lt;int&gt;\n 1 Colleen Hoover                    448\n 2 John Grisham                      355\n 3 David Baldacci                    248\n 4 E. L. James                       235\n 5 Stephen King                      201\n 6 Delia Owens                       193\n 7 Nicholas Sparks                   169\n 8 Kristin Hannah                    156\n 9 Gillian Flynn                     154\n10 Taylor Jenkins Reid               153"
  },
  {
    "objectID": "03-analysis.html#what-author-has-had-the-most-appearances-this-year-last-2-years-5-years-10-years",
    "href": "03-analysis.html#what-author-has-had-the-most-appearances-this-year-last-2-years-5-years-10-years",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "What author has had the most appearances this year? last 2 years? 5 years? 10 years?",
    "text": "What author has had the most appearances this year? last 2 years? 5 years? 10 years?\nFirst, I’ll find which authors have had the most appearances this year.\nAgain, Colleen Hoover blows everyone else out of the water with almost double 2nd place. She has 193 appearances to be exact.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2022) |&gt; # only include rows with a year over 2022\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 26) # only include appearances above 26\n\n\n  \n\n\n\nI’ll look at the past two years.\nColleen Hoover again. More than triple second place with 400.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2021) |&gt; # only include rows with a year over 2021\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 45) # only include appearances above 45\n\n\n  \n\n\n\nI’ll look at the past five years.\nColleen Hoover again, still with a large lead. She has 427.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2018) |&gt; # only include rows with a year over 2018\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 84) # only include appearances above 55\n\n\n  \n\n\n\nI’ll look at 10 years.\nThis is crazy to me that Colleen Hoover still has the lead despite only becoming popular a few years ago. Note that she only has 6 appearances 2013-2017 and still takes the lead. She has 434 total appearances at this point.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2013) |&gt; # only include rows with a year over 2013\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 109) # only include appearances above 109"
  },
  {
    "objectID": "03-analysis.html#what-authors-have-had-the-most-no.-1-appearances",
    "href": "03-analysis.html#what-authors-have-had-the-most-no.-1-appearances",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "What authors have had the most No. 1 appearances?",
    "text": "What authors have had the most No. 1 appearances?\nIt’s John Grisham with 48, though Delia Owens comes close with 44. Colleen Hoover takes third with 38.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1) |&gt; # only include rows with a rank of 1\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 15) # only include appearances above 16"
  },
  {
    "objectID": "03-analysis.html#what-author-has-had-the-most-no.-1-appearances-this-year-last-2-years-5-years-10-years",
    "href": "03-analysis.html#what-author-has-had-the-most-no.-1-appearances-this-year-last-2-years-5-years-10-years",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "What author has had the most No. 1 appearances this year? last 2 years? 5 years? 10 years?",
    "text": "What author has had the most No. 1 appearances this year? last 2 years? 5 years? 10 years?\nI’ll look at this year first.\nIt’s Colleen Hoover with 19.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2022,\n         rank == 1) |&gt; # only include rows with a year over 2022 and a rank of 1\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 1) # only include appearances above 1\n\n\n  \n\n\n\nNow two years.\nIt’s Colleen Hoover with 38.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2021,\n         rank == 1) |&gt; # only include rows with a year over 2021 and a rank of 1\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 2) # only include appearances above 2\n\n\n  \n\n\n\n5 years?\nFirst thing Colleen Hoover has not won. Delia Owens takes it with 44, most likely with Where the Crawdads Sing. Colleen Hoover comes in second with 38.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2018,\n         rank == 1) |&gt; # only include rows with a year over 2018 and a rank of 1\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 5) # only include rows with appearances above 5\n\n\n  \n\n\n\nAnd finally, 10 years?\nAlso Delia Owens with 44 for Where the Crawdads Sing, but closely followed by John Grisham at 41.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2013,\n         rank == 1) |&gt; # only include rows with a year over 2013 and a rank of 1\n  group_by(author) |&gt; # group by author\n  summarize(appearances = n()) |&gt; # count appearances per author\n  arrange(desc(appearances)) |&gt; # arrange in descending order by appearances\n  filter(appearances &gt; 12) # only include appearances above 12"
  },
  {
    "objectID": "03-analysis.html#what-authors-have-had-the-most-books-on-the-list",
    "href": "03-analysis.html#what-authors-have-had-the-most-books-on-the-list",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "What authors have had the most books on the list?",
    "text": "What authors have had the most books on the list?\nDanielle Steel has had the most with 74 books on the list. Christine Feehan comes in second with 56. Stuart Woods takes third with 44.\n\nbestsellers |&gt; # start with the data\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 22) # only include titles above 22"
  },
  {
    "objectID": "03-analysis.html#what-author-has-had-the-most-books-on-the-list-in-the-last-year-2-years-5-years-10-years",
    "href": "03-analysis.html#what-author-has-had-the-most-books-on-the-list-in-the-last-year-2-years-5-years-10-years",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "What author has had the most books on the list in the last year? 2 years? 5 years? 10 years?",
    "text": "What author has had the most books on the list in the last year? 2 years? 5 years? 10 years?\nI’ll start with this year.\nIt’s Danielle Steel with 12.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt;2022) |&gt; # only include rows with a year over 2022\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 3) # only include titles above 3\n\n\n  \n\n\n\nI’ll look at two years.\nIt’s Danielle Steel with 19. Colleen Hoover is in second with 11.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt;2021) |&gt; # only include rows with a year over 2021\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 4) # only include titles above 4\n\n\n  \n\n\n\nI’ll look at the last 5 years.\nIt’s Danielle Steel again with 40.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2018) |&gt; # only include rows with a year over 2018\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 10) # only include titles above 10\n\n\n  \n\n\n\nNow, I’ll look at the last 10 years.\nIt’s also Danielle Steel with 65.\n\nbestsellers |&gt; # start with the data\n  filter(year &gt; 2013) |&gt; # only include rows with a year over 2013\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 18) # only include titles above 18"
  },
  {
    "objectID": "03-analysis.html#what-books-have-been-on-the-list-for-the-most-number-of-weeks",
    "href": "03-analysis.html#what-books-have-been-on-the-list-for-the-most-number-of-weeks",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "What books have been on the list for the most number of weeks?",
    "text": "What books have been on the list for the most number of weeks?\nI’ll use gsa again to find which books have been on the list for the most number of weeks.\nDelia Owens wins with 193 appearances for Where the Crawdads Sing. Colleen Hoover is the only person with 2 books in the top 10 and takes second with 139. Gillian Flynn comes in third with 122 for Where the Crawdads Sing.\n\nbestsellers |&gt; # start with the data\n  group_by(author, title) |&gt; # group by author and title\n  summarize(appearances = n()) |&gt; # count number of appearances\n  arrange(desc(appearances)) |&gt; # arrange in descending order\n  filter(appearances &gt; 67) |&gt; # only include rows with appearances greater than 67\n  write_csv(\"data-processed/most-weeks.csv\") |&gt; # save the data for data wrapper\n  print() # print it\n\n`summarise()` has grouped output by 'author'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 10 × 3\n# Groups:   author [9]\n   author              title                             appearances\n   &lt;chr&gt;               &lt;chr&gt;                                   &lt;int&gt;\n 1 Delia Owens         WHERE THE CRAWDADS SING                   193\n 2 Colleen Hoover      IT ENDS WITH US                           139\n 3 Gillian Flynn       GONE GIRL                                 122\n 4 Taylor Jenkins Reid THE SEVEN HUSBANDS OF EVELYN HUGO         115\n 5 Paula Hawkins       THE GIRL ON THE TRAIN                     102\n 6 Colleen Hoover      VERITY                                     92\n 7 Anthony Doerr       ALL THE LIGHT WE CANNOT SEE                91\n 8 Celeste Ng          LITTLE FIRES EVERYWHERE                    81\n 9 E. L. James         FIFTY SHADES OF GREY                       79\n10 Heather Morris      THE TATTOOIST OF AUSCHWITZ                 70"
  },
  {
    "objectID": "03-analysis.html#what-books-were-no.-1-for-the-most-number-of-weeks",
    "href": "03-analysis.html#what-books-were-no.-1-for-the-most-number-of-weeks",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "What books were No. 1 for the most number of weeks?",
    "text": "What books were No. 1 for the most number of weeks?\nI’ll find which books were No. 1 for the most number of weeks by filtering first, and then using gsa.\nWhere the Crawdads Sing was number one for the most number of weeks by a good amount with 44. Fifty Shades of Grey by E. L. James is in second with 29.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1) |&gt; # only include rows where the rank is 1\n  group_by(author, title) |&gt; # group by author and title\n  summarize(appearances = n()) |&gt; # count number of appearances\n  arrange(desc(appearances)) |&gt; # arrange in descending order\n  filter(appearances &gt; 7) |&gt; # only include rows with appearances greater than 7\n  write_csv(\"data-processed/most-one-weeks.csv\") |&gt; # save the data for data wrapper\n  print() # print it\n\n`summarise()` has grouped output by 'author'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 3\n# Groups:   author [7]\n  author           title                   appearances\n  &lt;chr&gt;            &lt;chr&gt;                         &lt;int&gt;\n1 Delia Owens      WHERE THE CRAWDADS SING          44\n2 E. L. James      FIFTY SHADES OF GREY             29\n3 Paula Hawkins    THE GIRL ON THE TRAIN            26\n4 Colleen Hoover   IT ENDS WITH US                  18\n5 Colleen Hoover   IT STARTS WITH US                17\n6 Kathryn Stockett THE HELP                         16\n7 Rebecca Yarros   FOURTH WING                      15\n8 Kristin Hannah   THE WOMEN                        10\n\n\nLet’s see if the books returned to the charts after the move adaptations came out.\nFirst, I’ll look at Where the Crawdads Sing. he book was published in 2018 and the movie was released in July 2022. It looks like it stayed on the list pretty consistently after it first gained traction in 2019, though there’s a small dip in 2021, and then its sales faded in 2023 after the movie talk wore off.\n\nbestsellers |&gt; # start with the data\n  filter(str_detect(title, \"WHERE THE CRAWDADS SING\")) |&gt; # only include Where the Crawdads Sing\n  group_by(year) |&gt; # group by year\n  summarize(appearance = n()) # count the number of appearances in each year\n\n\n  \n\n\n\nNow, I’ll look at Fifty Shades of Grey. The book was published in 2011 and the movie was released in 2015. It looks like it got most traction in 2012 and 2013 (when the book actually got a redistribution deal after a small initial publication) with a slight resurgence in 2015 with the movie release.\n\nbestsellers |&gt; # start with the data\n  filter(str_detect(title, \"FIFTY SHADES OF GREY\")) |&gt; # only include Fifty Shades of Grey\n  group_by(year) |&gt; # group by year\n  summarize(appearance = n()) # count the number of appearances in each year\n\n\n  \n\n\n\nFinally, I’ll look at Gone Girl. The book was published in 2012 and the movie was released in 2014. It looks like it stayed on the list pretty consistently after publication, peaking in 2014 with the movie release and then dropping off in 2015.\n\nbestsellers |&gt; # start with the data\n  filter(str_detect(title, \"GONE GIRL\")) |&gt; # only include Gone Girl\n  group_by(year) |&gt; # group by year\n  summarize(appearance = n()) # count the number of appearances in each year"
  },
  {
    "objectID": "03-analysis.html#what-authors-have-had-the-most-titles-reach-no.-1",
    "href": "03-analysis.html#what-authors-have-had-the-most-titles-reach-no.-1",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "What authors have had the most titles reach No. 1?",
    "text": "What authors have had the most titles reach No. 1?\nI’ll find which authors have had the most No. 1 titles.\nNora Roberts takes first on this one with 20 number one titles.\nThese authors were also top three for most appearances on the chart, just in a different order.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1) |&gt; # only include rows with a rank of 1\n  distinct(author, title) |&gt; # only include distinct author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count number of titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 8) # only include rows with titles greater than 8"
  },
  {
    "objectID": "03-analysis.html#what-author-has-had-the-most-no.-1-books-in-the-last-2-years-5-years-10-years",
    "href": "03-analysis.html#what-author-has-had-the-most-no.-1-books-in-the-last-2-years-5-years-10-years",
    "title": "Combined Print and E-Book Fiction Analysis",
    "section": "What author has had the most No. 1 books in the last 2 years? 5 years? 10 years?",
    "text": "What author has had the most No. 1 books in the last 2 years? 5 years? 10 years?\nI’ll start with 2 years.\nJohn Sandford takes first with 5 No. 1 books.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1, \n         year &gt;2021) |&gt; # only include rows with a rank of 1 and a year over 2021\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 2) # only include rows with titles above 2\n\n\n  \n\n\n\nI’ll find which authors have had the most No. 1 books in the last 5 years.\nDavid Baldacci is first with 11 No. 1 books.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1, \n         year &gt; 2018) |&gt; # only include rows with a rank of 1 and a year over 2018\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 4) # only include rows with titles above 4\n\n\n  \n\n\n\nNow, I’ll look at the last 10 years.\nNora Roberts is first with 17 and David Baldacci is second with 16.\n\nbestsellers |&gt; # start with the data\n  filter(rank == 1,\n         year &gt; 2013) |&gt; # only include rows with a rank of 1 and a year over 2013\n  distinct(author, title) |&gt; # only include unique author/title combinations\n  group_by(author) |&gt; # group by author\n  summarize(titles = n()) |&gt; # count titles per author\n  arrange(desc(titles)) |&gt; # arrange in descending order by titles\n  filter(titles &gt; 8) # only include rows with titles above 8"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "New York Times Best Sellers Analysis",
    "section": "",
    "text": "I’m Aislyn Gaddis, a senior journalism student at the University of Texas at Austin.\nThis is just a simple Quarto website for my New York Times Best Sellers List data analysis. I first started this for my Reporting with Data class project in Spring 2023, but I’ve been working on it off and on since to improve and expand it.\nEach tab on the navigation bar is an R Notebook.\nThe GitHub repository for this project is here.\nYou can read the accompanying story here. (Note: I analyzed the Combined Print and E-book Fiction List and did some more analysis on the Hardcover Fiction List after I wrote this story.)"
  }
]